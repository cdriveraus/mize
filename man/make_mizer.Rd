% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mizer.R
\name{make_mizer}
\alias{make_mizer}
\title{Create an Optimizer}
\usage{
make_mizer(method = "L-BFGS", norm_direction = FALSE, scale_hess = TRUE,
  memory = 10, cg_update = "PR+", nest_q = 0,
  nest_convex_approx = FALSE, nest_burn_in = 0, use_nest_mu_zero = FALSE,
  kappa = 1.1, kappa_fun = "*", phi = 0.5, theta = 0.1,
  line_search = "MT", c1 = 1e-04, c2 = 0.1, step0 = 1,
  ls_initializer = "q", mom_type = "classical", mom_schedule = NULL,
  mom_init = NULL, mom_final = NULL, mom_switch_iter = NULL,
  mom_linear_weight = FALSE, max_iter = NULL, restart = NULL,
  verbose = FALSE, par = NULL, fg = NULL)
}
\description{
Factory function for creating a (possibly uninitialized) optimizer.
}
\details{
If the function to be optimized and starting point are not present at
creation time, then the optimizer should be initialized using
\code{\link{mizer_init}} before being used with \code{\link{mizer_step}}.

The function to be optimized should be passed as a list to the \code{fg}
parameter. This should consist of:
\itemize{
\item{\code{fn}}. The function to be optimized. Takes a vector of parameters
  and returns a scalar.
\item{\code{gr}}. The gradient of the function. Takes a vector of parameters and
  and returns a vector with the same length as the input parameter vector.
\item{\code{fg}}. Optional function which calculates the function and gradient in the
same routine. Takes a vector of parameters and returns a list containing
the function result as \code{fn} and the gradient result as \code{gr}.
}

The \code{fg} function is optional, but for some methods (e.g. line search
methods based on the Wolfe criteria), both the function and gradient values
are needed for the same parameter value. Calculating them in the same
function can save time if there is a lot of shared work.
}
\examples{
# Function to optimize and starting point
rosenbrock_fg <- list(
  fn = function(x) { 100 * (x[2] - x[1] * x[1]) ^ 2 + (1 - x[1]) ^ 2  },
  gr = function(x) { c( -400 * x[1] * (x[2] - x[1] * x[1]) - 2 * (1 - x[1]),
                         200 *        (x[2] - x[1] * x[1])) })
rb0 <- c(-1.2, 1)

# Create an optimizer and initialize it for use with the Rosenbrock function
opt <- make_mizer(method = "l-bfgs", par = rb0, fg = rosenbrock_fg)

# Create optimizer without initialization
opt <- make_mizer(method = "l-bfgs")

# Need to call mizer_init separately:
opt <- mizer_init(opt, rb0, rosenbrock_fg)
}

